rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Rules for the 'users' collection (no change)
    match /users/{userId} {
      allow read: if request.auth != null;
      allow create, update: if request.auth.uid == userId;
    }

    // Rules for the 'persons' collection (no change)
    match /persons/{personId} {
      allow create: if request.auth != null && request.resource.data.creatorUid == request.auth.uid;
      allow read, update, delete: if request.auth != null && resource.data.creatorUid == request.auth.uid;
    }

    // Rules for connections (no change)
    match /connections/{connectionId} {
      allow create: if request.auth != null && request.resource.data.requesterUid == request.auth.uid;
      allow read: if request.auth != null && (request.auth.uid == resource.data.requesterUid || request.auth.uid == resource.data.recipientUid);
      allow update: if request.auth != null && request.auth.uid == resource.data.recipientUid;
      allow delete: if request.auth != null && request.auth.uid == resource.data.requesterUid;
    }

    // NEW RULE: For posts on the Family Wall
    match /posts/{postId} {
      // A user can CREATE a post if:
      // 1. They are logged in.
      // 2. The post's authorUid is their own ID.
      // 3. The post content is a string and not empty.
      allow create: if request.auth != null &&
                      request.resource.data.authorUid == request.auth.uid &&
                      request.resource.data.content is string &&
                      request.resource.data.content.size() > 0;

      // Any logged-in user can READ posts.
      // We will filter the posts on the client-side to only show
      // posts from connected family members.
      allow read: if request.auth != null;

      // Only the author of a post can UPDATE or DELETE it.
      allow update, delete: if request.auth != null && resource.data.authorUid == request.auth.uid;
    }
  }
}
