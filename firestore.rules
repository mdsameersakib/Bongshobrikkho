rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Users can read other user profiles for searching,
    // but can only create or update their own.
    match /users/{userId} {
      allow read: if request.auth != null;
      allow create, update: if request.auth.uid == userId;
    }

    // UPDATED Rules for the 'persons' collection
    // These rules are now more open to allow for collaboration.
    match /persons/{personId} {
      // Any logged-in user can read and create person documents.
      allow read, create: if request.auth != null;

      // Any logged-in user can update any person document.
      // This allows for collaborative editing by the whole family.
      allow update: if request.auth != null;

      // For safety, only the original creator can delete a person.
      allow delete: if request.auth != null && resource.data.creatorUid == request.auth.uid;
    }

    // Connection rules remain the same. They are already correct.
    match /connections/{connectionId} {
      allow create: if request.auth != null && (
        request.resource.data.requesterUid == request.auth.uid ||
        (request.resource.data.recipientUid == request.auth.uid && request.resource.data.status == 'accepted')
      );
      allow read: if request.auth != null && (request.auth.uid == resource.data.requesterUid || request.auth.uid == resource.data.recipientUid);
      allow update: if request.auth != null && request.auth.uid == resource.data.recipientUid;
      allow delete: if request.auth != null && request.auth.uid == resource.data.requesterUid;
    }

    // Post rules remain the same.
    match /posts/{postId} {
      allow create: if request.auth != null && request.resource.data.authorUid == request.auth.uid;
      allow read: if request.auth != null;
      allow update, delete: if request.auth != null && resource.data.authorUid == request.auth.uid;
    }
  }
}
